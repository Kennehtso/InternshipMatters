# 	Deploy postgres db in heroku server and intergrate with our heroku website
5. I decided to use heroku due to for side project only, refer setup guide as following.
	1. Create heroku postgres in our django project app
		1. login to heroku dashboard, click on our 'app'
		2. In 'Overview' tab, click on 'Configure Add-ons' in 'Installed add-ons'
		3. In 'Add-ons' search for 'postgres', and select your plan, I choose the 'hobby Dev - Free'
		4. And click save
		5. Once complete, click on the created postgres db, click on 'Settings'
		6. In 'Administration'>'Database Credentials', click 'View Credentials', you will find all access information

	2. Install some tool for deployment
		- pip install Django-environ

	3. Create a '.env' file with the same directory of settings.py located
		we can store our account, password, or any sercure setting in it,
		Do define our database information, please type as:
		DATABASE_URL={THE DATABASE 'URI' IN Heroku 'Database Credentials}
		*Aware that  there should be no space symbal in the .env

	4. *** Important*** and .env to .gitIgnore file to prevent git to upload our secret info online

	4. Update our app settings.py
		1. paste the following code to allow our project to get secret data of using environ:
			import environ
			env = environ.Env()
			environ.Env.read_env()
			DATABASES['default'].update(env.db())

	5. pip freeze > requirements.txt to update the requirement list due to environ is new
	6. Upload the changes of 'settings.py' and 'requirement.txt' by Git
	7. Due to we dont upload the .env file, we need to define the secret info in heroku app.
		- Click on our 'app', > click 'settings'
		- In 'Config Vars' section, click 'Reveal Config Vars'
		- Create a new pair with
			- key: DATABASE_URL
			- value: {THE DATABASE 'URI' IN Heroku 'Database Credentials}

	8. login heroku with cli
		- open command prompt, type heroku login
		- In the command prompt, input 'heroku login'
		- press any key to open a page, and click 'login'
			once login, we can access with cmd
		- type 'cd {project directory clone from git}' to set our current location
		- type 'git remote -v' to check there should list out our project with 'origin' and 'heroku'
		- type 'heroku git:remote -a {App name}' to access to our app
		- type 'heroku run python manage.py migrate'
	
""" The following is the RDS Setup"""
""" I'm currently not using RDS, but I'm drop some note for futher need """
4. Use AWS RDS,
	- Login in to Amazon AWS,
	- Search 'RDS'
	- Click 'Create  Database'
	- Choose 'postgre'
	- free trail
	- Key-in and remember the username and password, other field leave it default.
	- ** In 'Connectivity' sessions, be aware to check 'yes' for 'Public access' to allow we access the db outside AWS
	- In' Additional options' we can give a initial db name, but isn't necessary
	- Click 'create' to start create process, it will take about 5 - 8 mins

5. Modify db:
	Once completed, we can modify our db
	1. Click on 'database-1' (as default)
	2. In 'Connectivity & security、 sessions, you will find 'endpoint'
	3. Copy the 'database-1.cx7daogp4teq.us-east-2.rds.amazonaws.com、 address, 
	4. Open 'pg admin 4'
	5. Right click on 'Server Group', click 'create' Server
	6. input a name for the db
	7. in 'Connection' tab, paste the 'endpoint' to 'Host' field
	8. follow the info in AWS for 'Port', 'username', 'password'
	9. For those received 'time out' alert, please check the following
	 	In AWS, Go to "Security group rules" (under "Connectivity & security")
		- Click the item "default" Security group
		- Click "Actions" > "Edit inbound rules" > "Add rule"
		- Select... Type: "All traffic", Source: "My IP", then click "Save rules"
	10. Once connected, Go back to django project
	11. Open settings.py
	12. update the db session TO:
		DATABASES = {
				'default': {
					'ENGINE': 'django.db.backends.postgresql',
					'NAME': 'XXXXXXXXXXXXXXX', #Find in pg admin
					'USER': 'XXXXXXX', #DEFAULT
					'PASSWORD':'XXXXXXXX',
					'HOST':'XXXXXXXXXXXXXXXXXXXXX.com',
					'PORT':'XXXXX',#DEFAULT
				}
			}
	13. Save, and run 'python manage.py migrate' in CMD
	14. You can now access the DB in Live ! 
	** Please check if the inbound connect set to 'everywhere' in RDS Instance > 'inbound rules' > 'Source' field
	"""